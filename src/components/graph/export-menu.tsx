"use client"

import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { Separator } from "@/components/ui/separator"
import { useToast } from "@/hooks/use-toast"
import { Download, FileText, Table, Code } from "lucide-react"
import type { StandardNode, OutcomeProfile, PathState } from "@/types/standards"

interface ExportMenuProps {
  path: PathState
  standards: StandardNode[]
  profile?: OutcomeProfile
  className?: string
}

export function ExportMenu({ path, standards, profile, className }: ExportMenuProps) {
  const { toast } = useToast()

  const exportMarkdown = () => {
    if (!profile || path.selectedStandards.length === 0) return

    const selectedStandards = path.selectedStandards
      .map((id) => standards.find((s) => s.id === id))
      .filter(Boolean) as StandardNode[]

    const markdown = `# ${profile.name} Compliance Checklist

## Overview
- **Profile**: ${profile.name}
- **Description**: ${profile.description}
- **Standards Selected**: ${selectedStandards.length}
- **Generated**: ${new Date().toLocaleDateString()}

## Implementation Path

${selectedStandards
  .map(
    (standard, index) => `
### ${index + 1}. ${standard.id} - ${standard.title}

**Summary**: ${standard.summary}

**Control Families**: ${standard.families.join(", ")}

**Official Documentation**: ${standard.url}

**Tags**: ${standard.tags.join(", ")}

${standard.version ? `**Version**: ${standard.version}` : ""}

${standard.jurisdiction ? `**Jurisdiction**: ${standard.jurisdiction}` : ""}

---
`,
  )
  .join("")}

---
*Generated by ISO Visual Map Tool - ${window.location.href}*
`

    const blob = new Blob([markdown], { type: "text/markdown" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${profile.id}-compliance-checklist-${new Date().toISOString().split("T")[0]}.md`
    a.click()
    URL.revokeObjectURL(url)

    toast({
      title: "Markdown exported",
      description: "Your compliance checklist has been downloaded.",
    })
  }

  const exportCSV = () => {
    if (!profile || path.selectedStandards.length === 0) return

    const selectedStandards = path.selectedStandards
      .map((id) => standards.find((s) => s.id === id))
      .filter(Boolean) as StandardNode[]

    const headers = ["Order", "ID", "Title", "Families", "Tags", "Status", "Version", "Jurisdiction", "URL"]
    const rows = selectedStandards.map((standard, index) => [
      index + 1,
      standard.id,
      `"${standard.title}"`,
      `"${standard.families.join(", ")}"`,
      `"${standard.tags.join(", ")}"`,
      standard.status || "active",
      standard.version || "",
      standard.jurisdiction || "",
      standard.url,
    ])

    const csv = [headers, ...rows].map((row) => row.join(",")).join("\n")

    const blob = new Blob([csv], { type: "text/csv" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${profile.id}-compliance-checklist-${new Date().toISOString().split("T")[0]}.csv`
    a.click()
    URL.revokeObjectURL(url)

    toast({
      title: "CSV exported",
      description: "Your compliance checklist has been downloaded.",
    })
  }

  const exportJSON = () => {
    if (!profile || path.selectedStandards.length === 0) return

    const selectedStandards = path.selectedStandards
      .map((id) => standards.find((s) => s.id === id))
      .filter(Boolean) as StandardNode[]

    const exportData = {
      profile: {
        id: profile.id,
        name: profile.name,
        description: profile.description,
      },
      path: path.selectedStandards,
      standards: selectedStandards,
      metadata: {
        exportedAt: new Date().toISOString(),
        source: window.location.href,
        version: "1.0",
      },
    }

    const json = JSON.stringify(exportData, null, 2)
    const blob = new Blob([json], { type: "application/json" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `${profile.id}-compliance-data-${new Date().toISOString().split("T")[0]}.json`
    a.click()
    URL.revokeObjectURL(url)

    toast({
      title: "JSON exported",
      description: "Your compliance data has been downloaded.",
    })
  }

  const canExport = profile && path.selectedStandards.length > 0

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button variant="outline" size="sm" className={`bg-transparent ${className}`} disabled={!canExport}>
          <Download className="h-4 w-4 mr-1" />
          Export
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-64" align="end">
        <Card className="border-0 shadow-none">
          <CardHeader className="pb-3">
            <CardTitle className="text-sm">Export Options</CardTitle>
          </CardHeader>
          <CardContent className="space-y-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={exportMarkdown}
              className="w-full justify-start"
              disabled={!canExport}
            >
              <FileText className="h-4 w-4 mr-2" />
              Markdown Checklist
            </Button>

            <Button
              variant="ghost"
              size="sm"
              onClick={exportCSV}
              className="w-full justify-start"
              disabled={!canExport}
            >
              <Table className="h-4 w-4 mr-2" />
              CSV Spreadsheet
            </Button>

            <Button
              variant="ghost"
              size="sm"
              onClick={exportJSON}
              className="w-full justify-start"
              disabled={!canExport}
            >
              <Code className="h-4 w-4 mr-2" />
              JSON Data
            </Button>

            <Separator className="my-2" />

            <div className="text-xs text-muted-foreground px-2">
              {!canExport
                ? "Select a profile and add standards to enable export"
                : `${path.selectedStandards.length} standards selected`}
            </div>
          </CardContent>
        </Card>
      </PopoverContent>
    </Popover>
  )
}
